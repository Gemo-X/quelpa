[[https://raw.github.com/quelpa/quelpa/master/logo/quelpa-logo-h128.png]]

[[https://travis-ci.org/quelpa/quelpa.png?branch=master]]

Build and install your Emacs Lisp packages on-the-fly and directly from source.

If you want to help with the development of quelpa, check the [[https://github.com/quelpa/quelpa/issues][issues.]]

** Overview

=quelpa= brings the power over your Emacs packages back to you. The [[http://melpa.milkbox.net/packages/][melpa]] archive is great because it has so many packages but why should an external build service control what packages you can install?

Rather =quelpa= uses recipes in the [[https://github.com/milkypostman/melpa#recipe-format][melpa-format]] to build the packages you want from the source code and installs them using the built-in Emacs package manager.

You can build and install packages from all the sources the melpa build script =package-build= supports:

- git: http://git-scm.com/
- github: https://github.com/
- bazaar (bzr): http://bazaar.canonical.com/en/
- mercurial (hg): http://mercurial.selenic.com/
- subversion (svn): http://subversion.apache.org/
- cvs: http://www.nongnu.org/cvs/
- darcs: http://darcs.net/
- Emacs Wiki (wiki): http://www.emacswiki.org/

** Requirements

- Emacs 24.3.1
- git: http://git-scm.com/

For any build source you need the corresponding tool. So if you want to install a =subversion= hosted package you need to have =subversion= installed locally.

Important here is to note that if the source for a package is fetched with =git=, it still can have a dependency that may have to be fetched with =mercurial= so you better install the most common ones, i.e. =git=, =bzr=, =hg=, and =svn=.

** Installation

First =quelpa= needs to be bootstrapped, that means melpa's =package-build= has to be installed, then =quelpa= itself.

To bootstrap =quelpa= use this code:

#+BEGIN_SRC emacs-lisp
(if (require 'quelpa nil t)
    (quelpa '(quelpa :repo "quelpa/quelpa" :fetcher github) :upgrade t)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
#+END_SRC

Evaluate this expression in your =*scratch*= buffer to bootstrap =quelpa= now. Add it to your Emacs init file to make sure =quelpa= will be installed and upgraded automatically if necessary.

If you don't like =quelpa= doing self-upgrades (although this is recommended) shorten it to:

#+BEGIN_SRC emacs-lisp
(unless (require 'quelpa nil t)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
#+END_SRC

** Usage

Cool. Now that we are all setup, enjoy the ride.

To get an idea how =quelpa= can be used, you might take a look at the Emacs configuration [[http://steckerhalter.co.vu/steckemacs.html][steckemacs]], especially the [[http://steckerhalter.co.vu/steckemacs.html#sec-2-10][Modes section]] where =quelpa= loads and installs the required packages just before they are configured.

There are two ways to install packages with =quelpa=:

*** Installing with a package name

Check http://melpa.milkbox.net/ for any packages you would like to install. You only need to know the name:

#+BEGIN_SRC emacs-lisp
(quelpa 'magit)
#+END_SRC

Running this expression will fetch the =magit= source code from Github, build a package in elpa format and install it.

If the package has dependencies it will install them first.

*** Installing with a recipe

You can also install packages that are not on melpa. For this you need to provide a recipe in the melpa-format.

For example I like the package [[http://www.emacswiki.org/emacs/eval-sexp-fu.el][eval-sexp-fu.el]] which is located on the Emacs Wiki but not available on melpa. I just need to provide a valid recipe instead of a package name:

#+BEGIN_SRC emacs-lisp
(quelpa '(eval-sexp-fu :fetcher wiki :files ("eval-sexp-fu.el")))
#+END_SRC

Don't forget the quote before the recipe.

*** Upgrading packages

Per default =quelpa= does not do anything if a package is already installed. You can customize this behavior globally by setting the variable =quelpa-upgrade-p= to =t= manually:

#+BEGIN_SRC emacs-lisp
(setq quelpa-upgrade-p t)
#+END_SRC

or by using the customize inferface =M-x customize-variable quelpa-upgrade-p RET= and switching the variable to =on=.

To override this default behavior for individual packages you can use:

#+BEGIN_SRC emacs-lisp
(quelpa 'company :upgrade t)
#+END_SRC

=quelpa= will try to upgrade =company= even if upgrading is disabled globally.

#+BEGIN_SRC emacs-lisp
(quelpa '(ag :repo "Wilfred/ag.el" :fetcher github) :upgrade nil)
#+END_SRC

=quelpa= will not upgrade =ag=.

*** Managing packages

Because =quelpa= installs packages using the built-in Emacs package management system, you can use the regular interface =M-x list-packages= and work with your packages as you normally do.

** Why "quelpa"?

German =Quelle= means =spring= (water source) but also =source=. For example =source code= is translated =Quellcode=. =ELPA= is short for Emacs Lisp Package Archive. You get the idea.
