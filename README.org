[[https://raw.github.com/quelpa/quelpa/master/logo/quelpa-logo-h128.png]]

[[https://travis-ci.org/quelpa/quelpa.png?branch=master]]

Build and install your Emacs Lisp packages on-the-fly and directly from source.

If you want to help out with the development of quelpa, check out the [[https://github.com/quelpa/quelpa/issues][issues]].

** Overview

=quelpa= brings the power over your Emacs packages back to you. The [[http://melpa.milkbox.net/packages/][MELPA]] archive is great because it is the fastest growing collection of recipes, but why should an external build service control what packages you are able to install?

=quelpa= uses recipes in [[https://github.com/milkypostman/melpa#recipe-format][MELPA's format]] to build your desired packages from source and installs them using the built-in Emacs package manager. Basically, it's a standards-complying [[https://github.com/dimitri/el-get][el-get]]. Or a local MELPA that doesn't require waiting for new builds.

=quelpa= can be used in many ways, for example to manage your personal packages with less limitations than a package archive would impose on you, testing development versions of other packages or as a helper when developing a package.

To get an idea how to use it to manage your Emacs setup, take a look at the [[http://steckerhalter.co.vu/steckemacs.html][steckemacs configuration]], especially the [[http://steckerhalter.co.vu/steckemacs.html#sec-2-10][Modes section]] where =quelpa= loads and installs the required packages just before they are configured.

You can build and install packages from all the sources MELPA's build script =package-build= supports:

- git: http://git-scm.com/
- github: https://github.com/
- bazaar (bzr): http://bazaar.canonical.com/en/
- mercurial (hg): http://mercurial.selenic.com/
- subversion (svn): http://subversion.apache.org/
- cvs: http://www.nongnu.org/cvs/
- darcs: http://darcs.net/
- Emacs Wiki (wiki): http://www.emacswiki.org/

Additional fetchers will be added soon.

** Requirements

- Emacs 24.3.1
- git: http://git-scm.com/

Every build requires the corresponding build tool. To install a =subversion= hosted package, you need to have =subversion= installed.

Note: Even if the sources of a package are fetched with a VCS tool you have installed, they might have dependencies that require a different VCS tool. Better install the most common ones before proceeding.

** Installation

First =quelpa= needs to be bootstrapped. This means MELPA's =package-build= has to be installed first, then =quelpa= itself.

To bootstrap =quelpa= use this code snippet:

#+BEGIN_SRC emacs-lisp
(if (require 'quelpa nil t)
    (quelpa '(quelpa :repo "quelpa/quelpa" :fetcher github) :upgrade t)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
#+END_SRC

Evaluate this expression in your =*scratch*= buffer to bootstrap =quelpa=. Add it to your Emacs init file to make sure =quelpa= will be installed and upgraded automatically when needed.

If you don't like =quelpa= doing self-upgrades (although this is recommended), use the following snippet instead:

#+BEGIN_SRC emacs-lisp
(unless (require 'quelpa nil t)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
#+END_SRC

** Usage

Cool. Now that we are all setup, enjoy the ride.

There are two ways to install packages with =quelpa=:

*** Installing with a package name

Check http://melpa.milkbox.net/ for any packages you would like to install. You only need to know the name:

#+BEGIN_SRC emacs-lisp
(quelpa 'magit)
#+END_SRC

Running this expression will fetch the =magit= source code from Github, build a package in the ELPA format and install it.

Interactive installation is supported as well. Just execute =M-x quelpa= and select a recipe name from MELPA.

If the package has dependencies they will be installed first.

*** Installing with a recipe

You can also install packages that are not on MELPA. For this you need to provide a recipe in MELPA's format.

For example if I'd like to install the [[http://www.emacswiki.org/emacs/eval-sexp-fu.el][eval-sexp-fu.el package]] which is located on the Emacs Wiki but not available on MELPA, I just need to provide a valid recipe instead of a package name:

#+BEGIN_SRC emacs-lisp
(quelpa '(eval-sexp-fu :fetcher wiki :files ("eval-sexp-fu.el")))
#+END_SRC

Don't forget the quote before the recipe.

*** Upgrading individual packages

Per default =quelpa= does not do anything if a package is already installed. You can customize this behavior globally by setting the variable =quelpa-upgrade-p= to =t= manually:

#+BEGIN_SRC emacs-lisp
(setq quelpa-upgrade-p t)
#+END_SRC

Alternatively customize this variable by executing =M-x customize-variable quelpa-upgrade-p RET=.

To override the default behavior for individual packages you can use:

#+BEGIN_SRC emacs-lisp
(quelpa 'company :upgrade t)
#+END_SRC

This way =quelpa= will try to upgrade =company= even if upgrading is disabled globally.

#+BEGIN_SRC emacs-lisp
(quelpa '(ag :repo "Wilfred/ag.el" :fetcher github) :upgrade nil)
#+END_SRC

When used that way, =quelpa= will not upgrade =ag=. This can be used to "pin" packages when evaluating a buffer with =quelpa= invocations.

*** Upgrading all packages

Upgrading all your =quelpa= packages at init is one option to keep them up to date, but can slow it down considerably. Alternatively you can execute =M-x quelpa-upgrade= and upgrade every cached package.

This command relies on an intact cache file which is set in the =quelpa-cache-file= variable. It is updated after every =quelpa= invocation. To reset it for debugging purposes, just delete the file and better keep a backup.

*** Managing packages

Because =quelpa= installs packages using the built-in Emacs package management system, you can use its regular interface by executing =M-x list-packages= and work with your packages as you would normally do. Deleting a package does not affect the =quelpa= cache yet.

** Why "quelpa"?

The german word =Quelle= means =spring= (as in: water source) but also =source=. =source code= is translated to =Quellcode=. =ELPA= is the abbreviation for Emacs Lisp Package Archive. You get the idea.
